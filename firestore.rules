rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user exists and get their role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if user is a superadmin
    function isSuperAdmin(userId) {
      return getUserRole(userId) == 'superadmin';
    }

    // Helper function to check if user is an admin or superadmin
    function isAdminOrSuperAdmin(userId) {
      let role = getUserRole(userId);
      return role == 'admin' || role == 'superadmin';
    }

    // Helper function to check if the requesting user is the same as the resource user
    function isRequestingUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && getUserRole(request.auth.uid) == 'admin';
    }

    // Helper function to check if user is superadmin
    function isSuperAdmin() {
      return request.auth != null && getUserRole(request.auth.uid) == 'superadmin';
    }

    // Helper function to check if user exists
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // Helper function to get requesting user's company ID
    function requestingUserCompanyId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own document.
      allow create: if request.auth != null;
      
      // Only the authenticated user can read or update their own document.
      // Admins and Superadmins can read any user profile.
      allow read, update: if (request.auth != null && request.auth.uid == userId) || 
                              (request.auth != null && isAdminOrSuperAdmin(request.auth.uid));
                              
      // Nobody can delete user documents directly for safety.
      allow delete: if false;

      // Rules for user subcollections (messages, diagnoses, exams)
      match /{subcollection}/{docId} {
        allow read, write, create, delete: if isRequestingUser(userId) 
                           || isSuperAdmin() 
                           || (isAdmin() && userExists(userId) && requestingUserCompanyId() == getUserData(userId).companyId);
        
        // Rules for nested subcollections (like messages within diagnoses)
        match /{nestedSubcollection}/{nestedDocId} {
          allow read, write, create, delete: if isRequestingUser(userId) 
                             || isSuperAdmin() 
                             || (isAdmin() && userExists(userId) && requestingUserCompanyId() == getUserData(userId).companyId);
        }
      }
    }

    // Rules for the 'companies' collection
    match /companies/{companyId} {
      // Only superadmins can create, read, or update companies.
      allow read, create, update: if request.auth != null && isSuperAdmin(request.auth.uid);
      
      // Nobody can delete companies for safety.
      allow delete: if false;
    }
  }
}
